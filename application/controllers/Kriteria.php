<?php 
/*
 Generated by Manuigniter v2.0 
 www.manuigniter.com
*/
class Kriteria extends CI_Controller {
    function __construct() {
        parent::__construct();
        $this->load->model('Kriteria_model');
    } 

    /*
    * Listing of kriteria
    */
    public function index() {
        try {
            $id_user = $this->session->userdata('id_user');
            $level = $this->session->userdata('level');
            $data['title'] = 'Kriteria';
            $data['user'] = $this->db->get_where('mst_user', ['email' => $this->session->userdata('email')])->row_array();
            $data['list_user'] = $this->db->get('mst_user')->result_array();
            $data['identitas'] = $this->db->get('tbl_aplikasi')->row();
            $data['kriteria'] = $this->Kriteria_model->get_all_kriteria();
            $data['level'] = $level;
            $this->load->view('templates/header', $data);
            if($level == 'Admin'){
                $this->load->view('templates/sidebar_admin', $data);
            }elseif($level == 'Perbekel'){
                $this->load->view('templates/sidebar_perbekel', $data);
            }
            $this->load->view('admin/kriteria/index', $data);
            $this->load->view('templates/footer');
        } catch (Exception $ex) {
            throw new Exception('Kriteria Controller : Error in index function - ' . $ex);
        }  
    }

    /*
    * Adding a new kriteria
    */
function add() 
{  
        try {
            // Ambil data dari input form
            $params = array(
                'nama_kriteria' => $this->input->post('nama_kriteria'),
                'bobot' => $this->input->post('bobot'),
                'type' => $this->input->post('type'),
            );

            // Load library
            $this->load->library('upload');
            $this->load->library('form_validation');

            // Set aturan validasi untuk form
            $this->form_validation->set_rules('nama_kriteria', 'Nama kriteria', 'required');
            $this->form_validation->set_rules('bobot', 'Bobot', 'required|numeric');
            $this->form_validation->set_rules('type', 'Type', 'required');

            if ($this->form_validation->run()) {
                // Hitung total bobot yang sudah ada di database
                $total_bobot_sekarang = $this->db->select_sum('bobot')->get('kriteria')->row()->bobot;

                // Nilai bobot yang baru dimasukkan oleh pengguna
                $bobot_baru = $this->input->post('bobot');

                // Validasi apakah total bobot + bobot baru melebihi 100
                if (($total_bobot_sekarang + $bobot_baru) > 100) {
                    // Jika melebihi, tampilkan pesan error
                    $this->session->set_flashdata('msg','error');
                    $this->session->set_flashdata('alert_msg', '<div class="alert alert-danger text-center">Total bobot tidak boleh melebihi 100.</div>');
                    redirect('kriteria/add');
                } else {
                    // Jika tidak melebihi, tambahkan data ke database
                    $id = $this->Kriteria_model->add_kriteria($params);
                    $this->session->set_flashdata('msg','simpan');
                    $this->session->set_flashdata('alert_msg', '<div class="alert alert-success text-center">Successfully added.</div>');
                    redirect('kriteria/index');
                }
            } else { 
                // Jika validasi gagal, tampilkan halaman form kembali
                $id_user = $this->session->userdata('id_user');
                $data['title'] = 'Tambah Kriteria';
                $data['user'] = $this->db->get_where('mst_user', ['email' => $this->session->userdata('email')])->row_array();
                $data['list_user'] = $this->db->get('mst_user')->result_array();
                $data['identitas'] = $this->db->get('tbl_aplikasi')->row();
                $this->load->view('templates/header', $data);
                $this->load->view('templates/sidebar_admin', $data);
                $this->load->view('admin/kriteria/add', $data);
                $this->load->view('templates/footer');
            }
        } catch (Exception $ex) {
            throw new Exception('Kriteria Controller : Error in add function - ' . $ex);
        }  
    }  

    /*
    * Editing a kriteria
    */
    public function edit($id) 
    {   
        try {
            // Ambil data kriteria yang akan diedit
            $data['kriteria'] = $this->Kriteria_model->get_kriteria($id);

            // Load library
            $this->load->library('upload');
            $this->load->library('form_validation');

            if (isset($data['kriteria']['id'])) {
                // Ambil data dari input form
                $params = array(
                    'nama_kriteria' => $this->input->post('nama_kriteria'),
                    'bobot' => $this->input->post('bobot'),
                    'type' => $this->input->post('type'),
                );

                // Set aturan validasi untuk form
                $this->form_validation->set_rules('nama_kriteria', 'Nama Kriteria', 'required');
                $this->form_validation->set_rules('bobot', 'Bobot', 'required|numeric');
                $this->form_validation->set_rules('type', 'Type', 'required');

                if ($this->form_validation->run()) {
                    // Hitung total bobot saat ini tanpa termasuk bobot dari kriteria yang sedang diedit
                    $current_bobot = $data['kriteria']['bobot']; // Bobot sebelum diupdate
                    $total_bobot_sekarang = $this->db->select_sum('bobot')->get('kriteria')->row()->bobot - $current_bobot;

                    // Nilai bobot baru yang dimasukkan oleh pengguna
                    $bobot_baru = $this->input->post('bobot');

                    // Validasi apakah total bobot + bobot baru melebihi 100
                    if (($total_bobot_sekarang + $bobot_baru) > 100) {
                        // Jika melebihi, tampilkan pesan error
                        $this->session->set_flashdata('msg','error');
                        $this->session->set_flashdata('alert_msg', '<div class="alert alert-danger text-center">Total bobot tidak boleh melebihi 100.</div>');
                        redirect('kriteria/edit/' . $id);
                    } else {
                        // Jika tidak melebihi, update data ke database
                        $this->Kriteria_model->update_kriteria($id, $params);
                        $this->session->set_flashdata('msg','edit');
                        $this->session->set_flashdata('alert_msg', '<div class="alert alert-info text-center">Successfully updated.</div>');
                        redirect('kriteria/index');
                    }
                } else {
                    // Jika validasi gagal, tampilkan halaman form kembali
                    $id_user = $this->session->userdata('id_user');
                    $data['title'] = 'Edit Kriteria';
                    $data['user'] = $this->db->get_where('mst_user', ['email' => $this->session->userdata('email')])->row_array();
                    $data['list_user'] = $this->db->get('mst_user')->result_array();
                    $data['identitas'] = $this->db->get('tbl_aplikasi')->row();   
                    $this->load->view('templates/header', $data);
                    $this->load->view('templates/sidebar_admin', $data);
                    $this->load->view('admin/kriteria/edit', $data);
                    $this->load->view('templates/footer');
                }
            } else {
                show_error('The kriteria you are trying to edit does not exist.');
            }
        } catch (Exception $ex) {
            throw new Exception('Kriteria Controller : Error in edit function - ' . $ex);
        }  
    } 

    /*
    * Deleting kriteria
    */
    function remove($id) {
        try {
            $kriteria = $this->Kriteria_model->get_kriteria($id);
            // check if the kriteria exists before trying to delete it
            if (isset($kriteria['id'])) {
                $this->Kriteria_model->delete_kriteria($id);
                $this->session->set_flashdata('alert_msg', '<div class="alert alert-success text-center">Succesfully Removed.</div>');
                redirect('kriteria/index');
            } else {
                show_error('The kriteria you are trying to delete does not exist.');
            }
        } catch (Exception $ex) {
            throw new Exception('Kriteria Controller : Error in remove function - ' . $ex);
        }  
    }

    /*
    * View more a kriteria
    */
    public function view_more($id) {   
        try {
            $data['kriteria'] = $this->Kriteria_model->get_kriteria($id);
            if (isset($data['kriteria']['id'])) {
                $data['_view'] = 'kriteria/view_more';
                $this->load->view('layouts/main', $data);
            } else {
                show_error('The kriteria you are trying to view more does not exist.');
            }
        } catch (Exception $ex) {
            throw new Exception('Kriteria Controller : Error in View more function - ' . $ex);
        }  
    } 

    /*
    * Listing of kriteria
    */
    public function search_by_clm() {
        $column_name = $this->input->post('column_name');
        $value_id = $this->input->post('value_id');
        $data['noof_page'] = 0;
        $params = array();
        $data['kriteria'] = $this->Kriteria_model->get_all_kriteria_by_cat($column_name, $value_id);
        $data['_view'] = 'kriteria/index';
        $this->load->view('layouts/main', $data);
    }

    /*
    * get search values by column- kriteria
    */
    public function get_search_values_by_clm() {
        $clm_name = $this->input->post('clm_name');
        $value = $this->input->post('value');
        $id = $this->input->post('id');
        $params = array(
            $clm_name => $value,
        );
        $this->Kriteria_model->update_kriteria($id, $params);
        $data['noof_page'] = 0;
        $data['kriteria'] = $this->Kriteria_model->get_all_kriteria();
        $this->load->view('kriteria/index', $data);
    }
}
